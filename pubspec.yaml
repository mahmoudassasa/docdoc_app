name: book_a_doctor
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: "none" # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.3+1

environment:
  sdk: ^3.7.0

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  
  cupertino_icons: ^1.0.8
  flutter:
    sdk: flutter
# State Management.
  flutter_bloc: ^9.1.1
# Code Generator (mainly used with cubit & retrofit).    
  freezed: ^2.4.7
# Annotations for the freezed code-generator. This package does nothing without freezed too.
  freezed_annotation: ^2.4.1
# For Dependency Injection.
  get_it: ^8.0.3
# Automatically generate code for converting to and from JSON by annotating Dart classes.  
  json_serializable: ^6.9.4
# Annotation for the JSON code generation via the `json_serializable` package.
  json_annotation: ^4.9.0
# A powerful HTTP networking package, supports Interceptors, Aborting and canceling a request, Custom adapters, Transformers, etc.
  dio: ^5.8.0+1  
# A dio client generator.  
  retrofit: ^4.4.2
# Retrofit generator.
  retrofit_generator: ^9.1.9 
# Pretty Dio logger is a Dio interceptor that logs network calls in a pretty, easy to read format.  
  pretty_dio_logger: ^1.4.0 
# internationalized/localized messages, date and number formatting and parsing.
  intl: 0.19.0
# Easy and Fast internationalizing and localization App.
 # easy_localization: ^3.0.7+1
# Customize Flutter's default splash screen  
  flutter_native_splash: ^2.4.5
# An SVG rendering and widget library for Flutter, which allows painting and displaying Scalable Vector Graphics 
  flutter_svg: ^2.0.17
# A flutter plugin for adapting screen and font size.Guaranteed to look good on different models
  flutter_screenutil: ^5.9.3
# reading and writing simple key-value pairs
  shared_preferences: ^2.2.2
# A build system for Dart code generation and modular compilation.
  build_runner: ^2.4.7
  firebase_core: ^3.14.0
  cached_network_image: ^3.4.1
# provides API to store data in secure storage.
  flutter_secure_storage: ^9.0.0

dev_dependencies:
  
  flutter_lints: ^5.0.0
  flutter_test:
    sdk: flutter

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec
# The following section is specific to Flutter packages.
flutter:
  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true
  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/images/
    - assets/svgs/
  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images
  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package
  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package
